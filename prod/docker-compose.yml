---
version: '3.8'
services:
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ${NGINX_CONFIG_PATH}:/etc/nginx/nginx.conf
      - ${NGINX_SSL_CERT_PATH}:/etc/cert.pem
      - ${NGINX_SSL_KEY_PATH}:/etc/key.pem
      - ./dist:/usr/share/nginx/html
    ports: ['${NGINX_HTTP_PORT}:80', '${NGINX_HTTPS_PORT}:443']
    depends_on: [backend, images, auth, preprocessor]
    networks: [backend, swagger]
    restart: always
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./cmd/easytex/Dockerfile
    environment: ['CONFIG_PATH=/etc/easytex.yml', 'DB_URL=${DB_URL}', 'ADDRESS=${ADDRESS}}','RECOGNIZER_ADDRESS=${RECOGNIZER_ADDRESS}', 'STORAGE_ADDRESS=${STORAGE_ADDRESS}' ]
    volumes:
      - ./configs/easytex.yml:/etc/easytex.yml
    networks: [backend]
    depends_on: [postgres, auth]
    restart: always
  preprocessor:
    build:
      context: ./preprocessor
      dockerfile: ./Dockerfile
    networks: [backend]
    restart: always
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    networks: [backend]
    depends_on: [postgres, dragonfly]
    volumes:
      - ./configs/auth.yml:/etc/auth.yml
    restart: always
    environment: ['CONFIG_PATH=/etc/auth.yml', 'DB_URL=${DB_URL}', 'STORAGE_ADDRESS=${STORAGE_ADDRESS}']
  images:
    container_name: images
    build:
      context: .
      dockerfile: ./cmd/images/Dockerfile
    environment: ['CONFIG_PATH=${CONFIG_PATH}']
    networks: [backend]
    volumes:
      - ./configs/images.yml:/etc/images.yml
      - ./.aws/:/home/nonroot/.aws
  swagger:
    container_name: swagger
    image: swaggerapi/swagger-ui
    environment: [SWAGGER_JSON=/docs/swagger.yml]
    volumes: [./docs:/docs]
    networks: [swagger]
  dragonfly:
    container_name: dragonfly
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ports:
      - "6379:6379"
    volumes:
      - /mnt/dragonflydb:/data
    networks: [backend]
  postgres:
    container_name: postgres
    image: postgres:16
    volumes:
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init1.sql
      - ./scripts/postgres/default_user.sql:/docker-entrypoint-initdb.d/init2.sql
      - ./scripts/postgres/default_dir.sql:/docker-entrypoint-initdb.d/init3.sql
      - ./scripts/postgres/default_note.sql:/docker-entrypoint-initdb.d/init4.sql
      - /mnt/pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks: [backend]
networks:
  backend:
    driver: bridge
  swagger:
    driver: bridge
