---
version: '3.8'
services:
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ${NGINX_CONFIG_PATH}:/etc/nginx/nginx.conf
      - ./dist:/usr/share/nginx/html
    ports: ['${NGINX_HTTP_PORT}:80']
    depends_on: [backend, auth, images]
    networks: [backend, swagger]
    restart: always
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./cmd/easytex/Dockerfile
    ports: [8000:8000]
    environment: ['CONFIG_PATH=/etc/easytex.yml', 'DB_URL=${DB_URL}', 'ADDRESS=${ADDRESS}}','RECOGNIZER_ADDRESS=${RECOGNIZER_ADDRESS}', 'STORAGE_ADDRESS=${STORAGE_ADDRESS}' ]
    volumes:
      - ./configs/easytex.yml:/etc/easytex.yml
    networks: [backend]
    depends_on: [postgres, recognizer, auth, storage]
    restart: always
  images:
    container_name: images
    build:
      context: .
      dockerfile: ./cmd/images/Dockerfile
    ports: [8001:8000]
    environment: ['CONFIG_PATH=/etc/images.yml']
    networks: [backend]
    volumes:
      - ./configs/images.yml:/etc/images.yml
      - ./.aws/:/home/nonroot/.aws
  storage:
    container_name: storage
    build:
      context: .
      dockerfile: ./cmd/storage/Dockerfile
    ports: [8003:8000]
    networks: [backend]
    depends_on: [elasticsearch]
    environment: [ELASTICSEARCH_URL=http://elasticsearch:9200]
    restart: always
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    ports: [8004:8000]
    networks: [backend]
    depends_on: [postgres, dragonfly]
    volumes:
      - ./configs/auth.yml:/etc/auth.yml
    restart: always
    environment: ['CONFIG_PATH=/etc/auth.yml', 'DB_URL=${DB_URL}']
  recognizer:
    container_name: recognizer
    build:
      context: ./recognizer
      dockerfile: Dockerfile
    ports: [8002:50051]
    networks: [backend]
    environment: [CNSTD_DOWNLOAD_SOURCE="HF", CNOCR_DOWNLOAD_SOURCE="HF"]
  swagger:
    container_name: swagger
    image: swaggerapi/swagger-ui
    environment: [SWAGGER_JSON=/docs/swagger.yml]
    volumes: [./docs:/docs]
    networks: [swagger]
    ports:
      - 8080:80
  dragonfly:
    container_name: dragonfly
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ports:
      - "6379:${DRAGONFLY_PORT}"
    command: "--requirepass=${DRAGONFLY_PASSWORD} --port=${DRAGONFLY_PORT}"
    networks: [backend]
  postgres:
    container_name: postgres
    image: postgres:16
    ports: [5432:5432]
    volumes:
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init1.sql
      - ./scripts/postgres/default_user.sql:/docker-entrypoint-initdb.d/init2.sql
      - ./scripts/postgres/default_dir.sql:/docker-entrypoint-initdb.d/init3.sql
      - ./scripts/postgres/default_note.sql:/docker-entrypoint-initdb.d/init4.sql
      - ./scripts/postgres/snippets.sql:/docker-entrypoint-initdb.d/init5.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks: [backend]
  elasticsearch:
    container_name: elastic
    build:
      context: ./configs/elastic
      dockerfile: Dockerfile
    ports: [9200:9200, 9300:9300]
    networks: [backend]
    environment: [discovery.type=single-node, xpack.security.enabled=false]
networks:
  backend:
    driver: bridge
  swagger:
    driver: bridge
