// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: recognizer.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecognizerClient is the client API for Recognizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecognizerClient interface {
	RecognizeFormula(ctx context.Context, in *ImageToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error)
	RecognizeMixed(ctx context.Context, in *ImagesArrToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error)
	RecognizeText(ctx context.Context, in *ImagesArrToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error)
}

type recognizerClient struct {
	cc grpc.ClientConnInterface
}

func NewRecognizerClient(cc grpc.ClientConnInterface) RecognizerClient {
	return &recognizerClient{cc}
}

func (c *recognizerClient) RecognizeFormula(ctx context.Context, in *ImageToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error) {
	out := new(RecognizedResult)
	err := c.cc.Invoke(ctx, "/Recognizer/RecognizeFormula", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recognizerClient) RecognizeMixed(ctx context.Context, in *ImagesArrToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error) {
	out := new(RecognizedResult)
	err := c.cc.Invoke(ctx, "/Recognizer/RecognizeMixed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recognizerClient) RecognizeText(ctx context.Context, in *ImagesArrToRecognize, opts ...grpc.CallOption) (*RecognizedResult, error) {
	out := new(RecognizedResult)
	err := c.cc.Invoke(ctx, "/Recognizer/RecognizeText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecognizerServer is the server API for Recognizer service.
// All implementations must embed UnimplementedRecognizerServer
// for forward compatibility
type RecognizerServer interface {
	RecognizeFormula(context.Context, *ImageToRecognize) (*RecognizedResult, error)
	RecognizeMixed(context.Context, *ImagesArrToRecognize) (*RecognizedResult, error)
	RecognizeText(context.Context, *ImagesArrToRecognize) (*RecognizedResult, error)
	mustEmbedUnimplementedRecognizerServer()
}

// UnimplementedRecognizerServer must be embedded to have forward compatible implementations.
type UnimplementedRecognizerServer struct {
}

func (UnimplementedRecognizerServer) RecognizeFormula(context.Context, *ImageToRecognize) (*RecognizedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeFormula not implemented")
}
func (UnimplementedRecognizerServer) RecognizeMixed(context.Context, *ImagesArrToRecognize) (*RecognizedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeMixed not implemented")
}
func (UnimplementedRecognizerServer) RecognizeText(context.Context, *ImagesArrToRecognize) (*RecognizedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeText not implemented")
}
func (UnimplementedRecognizerServer) mustEmbedUnimplementedRecognizerServer() {}

// UnsafeRecognizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecognizerServer will
// result in compilation errors.
type UnsafeRecognizerServer interface {
	mustEmbedUnimplementedRecognizerServer()
}

func RegisterRecognizerServer(s grpc.ServiceRegistrar, srv RecognizerServer) {
	s.RegisterService(&Recognizer_ServiceDesc, srv)
}

func _Recognizer_RecognizeFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageToRecognize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognizerServer).RecognizeFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recognizer/RecognizeFormula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognizerServer).RecognizeFormula(ctx, req.(*ImageToRecognize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recognizer_RecognizeMixed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesArrToRecognize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognizerServer).RecognizeMixed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recognizer/RecognizeMixed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognizerServer).RecognizeMixed(ctx, req.(*ImagesArrToRecognize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recognizer_RecognizeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesArrToRecognize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognizerServer).RecognizeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recognizer/RecognizeText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognizerServer).RecognizeText(ctx, req.(*ImagesArrToRecognize))
	}
	return interceptor(ctx, in, info, handler)
}

// Recognizer_ServiceDesc is the grpc.ServiceDesc for Recognizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recognizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recognizer",
	HandlerType: (*RecognizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeFormula",
			Handler:    _Recognizer_RecognizeFormula_Handler,
		},
		{
			MethodName: "RecognizeMixed",
			Handler:    _Recognizer_RecognizeMixed_Handler,
		},
		{
			MethodName: "RecognizeText",
			Handler:    _Recognizer_RecognizeText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recognizer.proto",
}
